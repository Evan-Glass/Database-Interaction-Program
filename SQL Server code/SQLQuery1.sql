/* In class exercise for Chapter 7.
created in SQL 2012
*/

--The following command creates the Vendor table for the SalesCo database

CREATE TABLE VENDOR (
 V_CODE     	INTEGER     		PRIMARY KEY,
 V_NAME     	VARCHAR(35) 		NOT NULL,
 V_CONTACT  	VARCHAR(15) 		NOT NULL,
 V_AREACODE 	CHAR(3)     		NOT NULL,
 V_PHONE    	CHAR(8)     		NOT NULL,
 V_STATE    	CHAR(2)     		NOT NULL,
 V_ORDER    	CHAR(1)     		NOT NULL);

 --The following commad creates the Product table for the SalesCo databbase which connects with the Vendor Table

 CREATE TABLE PRODUCT (
 P_CODE     		VARCHAR(10) 	PRIMARY KEY ,
 P_DESCRIPT 		VARCHAR(35) 	NOT NULL,
 P_INDATE   		DATE,
 P_QOH      		SMALLINT,
 P_MIN      		SMALLINT,
 P_PRICE    		NUMERIC(8,2),
 P_DISCOUNT 		NUMERIC(5,2),
 V_CODE    			INTEGER,
FOREIGN KEY (V_CODE) REFERENCES VENDOR ON UPDATE CASCADE);


INSERT INTO VENDOR VALUES('21225','Bryson, Inc.','Smithson','615','223-3234','TN','Y');
INSERT INTO VENDOR VALUES('21226','SuperLoo, Inc.','Flushing','904','215-8995','FL','N');
INSERT INTO VENDOR VALUES('21231','D&E Supply','Singh','615','228-3245','TN','Y');
INSERT INTO VENDOR VALUES('21344','Gomez Bros.','Ortega','615','889-2546','KY','N');
INSERT INTO VENDOR VALUES('22567','Dome Supply','Smith','901','678-1419','GA','N');
INSERT INTO VENDOR VALUES('23119','Randsets Ltd.','Anderson','901','678-3998','GA','Y');
INSERT INTO VENDOR VALUES('24004','Brackman Bros.','Browning','615','228-1410','TN','N');
INSERT INTO VENDOR VALUES('24288','ORDVA, Inc.','Hakford','615','898-1234','TN','Y');
INSERT INTO VENDOR VALUES('25443','B&K, Inc.','Smith','904','227-0093','FL','N');
INSERT INTO VENDOR VALUES('25501','Damal Supplies','Smythe','615','890-3529','TN','N');
INSERT INTO VENDOR VALUES('25595','Rubicon Systems','Orton','904','456-0092','FL','Y');

INSERT INTO PRODUCT VALUES('11QER/31','Power painter, 15 psi., 3-nozzle'     ,'03-NOV-2011',  8,  5,109.99,0.00,25595);
INSERT INTO PRODUCT VALUES('13-Q2/P2','7.25-in. pwr. saw blade'              ,'13-DEC-2011', 32, 15, 14.99,0.05,21344);
INSERT INTO PRODUCT VALUES('14-Q1/L3','9.00-in. pwr. saw blade'              ,'13-NOV-2011', 18, 12, 17.49,0.00,21344);
INSERT INTO PRODUCT VALUES('1546-QQ2','Hrd. cloth, 1/4-in., 2x50'            ,'15-JAN-2012', 15,  8, 39.95,0.00,23119);
INSERT INTO PRODUCT VALUES('1558-QW1','Hrd. cloth, 1/2-in., 3x50'            ,'15-JAN-2012', 23,  5, 43.99,0.00,23119);
INSERT INTO PRODUCT VALUES('2232/QTY','B\&D jigsaw, 12-in. blade'            ,'30-DEC-2011',  8,  5,109.92,0.05,24288);
INSERT INTO PRODUCT VALUES('2232/QWE','B\&D jigsaw, 8-in. blade'             ,'24-DEC-2011',  6,  5, 99.87,0.05,24288);
INSERT INTO PRODUCT VALUES('2238/QPD','B\&D cordless drill, 1/2-in.'         ,'20-JAN-2012', 12,  5, 38.95,0.05,25595);
INSERT INTO PRODUCT VALUES('23109-HB','Claw hammer'                          ,'20-JAN-2012', 23, 10,  9.95,0.10,21225);
INSERT INTO PRODUCT VALUES('23114-AA','Sledge hammer, 12 lb.'                ,'02-JAN-2012',  8,  5, 14.40,0.05,NULL);
INSERT INTO PRODUCT VALUES('54778-2T','Rat-tail file, 1/8-in. fine'          ,'15-DEC-2011', 43, 20,  4.99,0.00,21344);
INSERT INTO PRODUCT VALUES('89-WRE-Q','Hicut chain saw, 16 in.'              ,'07-FEB-2012', 11,  5,256.99,0.05,24288);
INSERT INTO PRODUCT VALUES('PVC23DRT','PVC pipe, 3.5-in., 8-ft'              ,'20-FEB-2012',188, 75,  5.87,0.00,NULL);
INSERT INTO PRODUCT VALUES('SM-18277','1.25-in. metal screw, 25'             ,'01-MAR-2012',172, 75,  6.99,0.00,21225);
INSERT INTO PRODUCT VALUES('SW-23116','2.5-in. wd. screw, 50'                ,'24-FEB-2012',237,100,  8.45,0.00,21231);
INSERT INTO PRODUCT VALUES('WR3/TT3' ,'Steel matting, 4''x8''x1/6", .5" mesh','17-JAN-2012', 18,  5,119.95,0.10,25595);

--Create customer, invoice, as well as line tables

CREATE TABLE CUSTOMER (
CUS_CODE       	NUMERIC PRIMARY KEY,
CUS_LNAME       	VARCHAR(15) NOT NULL,
CUS_FNAME       	VARCHAR(15) NOT NULL,
CUS_INITIAL     	CHAR(1),
CUS_AREACODE 	CHAR(3) DEFAULT '615' NOT NULL CHECK(CUS_AREACODE IN ('615','713','931')),
CUS_PHONE       	CHAR(8) NOT NULL,
CUS_BALANCE     	NUMERIC (9,2) DEFAULT 0.00,
CONSTRAINT CUS_UI1 UNIQUE(CUS_LNAME,CUS_FNAME));

CREATE TABLE INVOICE (
INV_NUMBER     	 NUMERIC PRIMARY KEY,
CUS_CODE        	 NUMERIC NOT NULL REFERENCES	CUSTOMER(CUS_CODE),
INV_DATE        	DATE DEFAULT GETDATE() NOT NULL,
CONSTRAINT 	INV_CK1 CHECK (INV_DATE > CAST('01-JAN-2012' AS DATETIME)));

CREATE TABLE LINE (
INV_NUMBER      NUMERIC NOT NULL,
LINE_NUMBER    NUMERIC (2,0) NOT NULL,
P_CODE	        VARCHAR(10) NOT NULL,
LINE_UNITS         NUMERIC (9,2) DEFAULT 0.00 NOT NULL,
LINE_PRICE          NUMERIC (9,2) DEFAULT 0.00 NOT NULL,
PRIMARY KEY (INV_NUMBER,LINE_NUMBER),
FOREIGN KEY (INV_NUMBER) REFERENCES INVOICE ON DELETE CASCADE,
FOREIGN KEY (P_CODE) REFERENCES PRODUCT(P_CODE),
CONSTRAINT LINE_UI1 UNIQUE(INV_NUMBER, P_CODE));

--insert data into previous tables: customer, invoice, line

INSERT INTO CUSTOMER VALUES('10010','Ramas','Alfred','A','615','844-2573','0');
INSERT INTO CUSTOMER VALUES('10011','Dunne','Leona','K','713','894-1238','0');
INSERT INTO CUSTOMER VALUES('10012','Smith','Kathy','W','615','894-2285','345.859985351562');
INSERT INTO CUSTOMER VALUES('10013','Olowski','Paul','F','615','894-2180','536.75');
INSERT INTO CUSTOMER VALUES('10014','Orlando','Myron','','615','222-1672','0');
INSERT INTO CUSTOMER VALUES('10015','O''Brian','Amy','B','713','442-3381','0');
INSERT INTO CUSTOMER VALUES('10016','Brown','James','G','615','297-1228','221.190002441406');
INSERT INTO CUSTOMER VALUES('10017','Williams','George','','615','290-2556','768.929992675781');
INSERT INTO CUSTOMER VALUES('10018','Farriss','Anne','G','713','382-7185','216.550003051758');
INSERT INTO CUSTOMER VALUES('10019','Smith','Olette','K','615','297-3809','0');

INSERT INTO INVOICE VALUES('1001','10014','1/16/2012');
INSERT INTO INVOICE VALUES('1002','10011','1/16/2012');
INSERT INTO INVOICE VALUES('1003','10012','1/16/2012');
INSERT INTO INVOICE VALUES('1004','10011','1/17/2012');
INSERT INTO INVOICE VALUES('1005','10018','1/17/2012');
INSERT INTO INVOICE VALUES('1006','10014','1/17/2012');
INSERT INTO INVOICE VALUES('1007','10015','1/17/2012');
INSERT INTO INVOICE VALUES('1008','10011','1/17/2012');

INSERT INTO LINE VALUES('1001','1','13-Q2/P2','1','14.99');
INSERT INTO LINE VALUES('1001','2','23109-HB','1','9.95');
INSERT INTO LINE VALUES('1002','1','54778-2T','2','4.99');
INSERT INTO LINE VALUES('1003','1','2238/QPD','1','38.95');
INSERT INTO LINE VALUES('1003','2','1546-QQ2','1','39.95');
INSERT INTO LINE VALUES('1003','3','13-Q2/P2','5','14.99');
INSERT INTO LINE VALUES('1004','1','54778-2T','3','4.99');
INSERT INTO LINE VALUES('1004','2','23109-HB','2','9.95');
INSERT INTO LINE VALUES('1005','1','PVC23DRT','12','5.87');
INSERT INTO LINE VALUES('1006','1','SM-18277','3','6.99');
INSERT INTO LINE VALUES('1006','2','2232/QTY','1','109.92');
INSERT INTO LINE VALUES('1006','3','23109-HB','1','9.95');
INSERT INTO LINE VALUES('1006','4','89-WRE-Q','1','256.99');
INSERT INTO LINE VALUES('1007','1','13-Q2/P2','2','14.99');
INSERT INTO LINE VALUES('1007','2','54778-2T','1','4.99');
INSERT INTO LINE VALUES('1008','1','PVC23DRT','5','5.87');
INSERT INTO LINE VALUES('1008','2','WR3/TT3','3','119.95');
INSERT INTO LINE VALUES('1008','3','23109-HB','1','9.95');

-- the following statement creates a compound index based on the combination of P_Code and V_Code

CREATE INDEX VENPRODX ON PRODUCT(V_CODE,P_CODE);

--drop previous index

DROP INDEX VENPRODX ON PRODUCT;

--display selected columns from the product table

SELECT P_DESCRIPT, P_INDATE, P_PRICE, V_CODE
FROM   PRODUCT
WHERE V_CODE =21344;

--

 Select * from Product WHERE P_CODE = '13-Q2/P2';

UPDATE PRODUCT
SET    	P_INDATE = '01/18/2012',
			P_PRICE = 17.99,
       	P_MIN = 10
WHERE  P_CODE = '13-Q2/P2';

Select * from Product WHERE P_CODE = '13-Q2/P2';

INSERT INTO PRODUCT(P_CODE, P_DESCRIPT) VALUES ('BRT-345', 'Titanium drill bit');

--The Following statement deletes the record with P_CODE = 'Brt-345'

Select * FROM PRODUCT where P_CODE = 'BRT-345';

DELETE FROM PRODUCT where P_CODE = 'BRT-345';

Select * FROM PRODUCT where P_CODE = 'BRT-345';

-- copying an entire table into a new table (not tested in class)

INSERT INTO tablename SELECT columnlist FROM tablename;

-- .........................

 CREATE TABLE P (
 P_CODE     		VARCHAR(10) 	PRIMARY KEY ,
 P_DESCRIPT 		VARCHAR(35) 	NOT NULL,
 P_INDATE   		DATE,
 P_QOH      		SMALLINT,
 P_MIN      		SMALLINT,
 P_PRICE    		NUMERIC(8,2),
 P_DISCOUNT 		NUMERIC(5,2),
 V_CODE    			INTEGER,
FOREIGN KEY (V_CODE) REFERENCES V ON UPDATE CASCADE);

CREATE TABLE V (
 V_CODE     	INTEGER     		PRIMARY KEY,
 V_NAME     	VARCHAR(35) 		NOT NULL,
 V_CONTACT  	VARCHAR(15) 		NOT NULL,
 V_AREACODE 	CHAR(3)     		NOT NULL,
 V_PHONE    	CHAR(8)     		NOT NULL,
 V_STATE    	CHAR(2)     		NOT NULL,
 V_ORDER    	CHAR(1)     		NOT NULL);

INSERT INTO V SELECT * FROM Vendor;
INSERT INTO P SELECT * FROM Product;
SELECT * FROM V;
SELECT * FROM P;

--using comparison operators

SELECT P_DESCRIPT, P_QOH, P_MIN, P_PRICE
FROM   PRODUCT
WHERE  P_PRICE <= 10;

SELECT P_CODE, P_DESCRIPT, P_QOH, P_MIN, P_PRICE
FROM   PRODUCT
WHERE  P_CODE < '1558-QW1';

SELECT P_DESCRIPT, P_QOH, P_MIN, P_PRICE, P_INDATE
FROM   PRODUCT
WHERE  P_INDATE >= '20-JAN-2012';

--Using computed columns & column aliases

SELECT P_DESCRIPT, P_QOH, P_PRICE, P_QOH*P_PRICE
FROM   PRODUCT;

SELECT P_DESCRIPT, P_QOH, P_PRICE, P_QOH*P_PRICE AS TOTVALUE
FROM   PRODUCT;

SELECT P_CODE, P_INDATE, getdate() + 90 AS CUTDATE
FROM   PRODUCT

SELECT P_CODE, P_INDATE, getdate() - 90 AS CUTDATE
FROM   PRODUCT

WHERE  P_INDATE <= getdate() + 90;

SELECT P_CODE, P_INDATE, DATEDIFF(DAY,getdate(),P_INDATE) AS RemindDATE
FROM   PRODUCT;

SELECT P_DESCRIPT, P_INDATE, P_PRICE, V_CODE 
FROM PRODUCT
WHERE  V_CODE = 21344 OR  V_CODE = 24288;

SELECT P_DESCRIPT, P_INDATE, P_PRICE, V_CODE  
FROM PRODUCT
WHERE  P_PRICE < 50 AND P_INDATE > '15-JAN-2012';

-- the and keywords will be evaluated first, followed by the or keyword

SELECT P_DESCRIPT, P_INDATE, P_PRICE, V_CODE  
FROM PRODUCT
WHERE (P_PRICE < 50 AND P_INDATE > '15-JAN-2012')
OR  V_CODE = 24288;


-- we can change the order of evaluation by using parenthesese

SELECT P_DESCRIPT, P_INDATE, P_PRICE, V_CODE  
FROM PRODUCT
WHERE P_PRICE < 50 AND (P_INDATE > '15-JAN-2012'
OR  V_CODE = 24288);

SELECT * FROM PRODUCT
WHERE  NOT (V_CODE = 21344);   /* or WHERE  V_CODE != 21344; */

--between includes 17.99 as well as 100. it acts as <= >=
SELECT * FROM   PRODUCT
WHERE  P_PRICE BETWEEN 17.99 AND 100.00;

SELECT P_CODE, P_DESCRIPT, V_CODE  FROM  PRODUCT
WHERE  V_CODE IS NULL;

SELECT P_CODE, P_DESCRIPT, P_INDATE  FROM  PRODUCT
WHERE  P_INDATE IS NULL;

--sql server is not, by default, case sensitive (but oracle is)

SELECT V_NAME, V_CONTACT, V_AREACODE, V_PHONE
FROM   VENDOR
WHERE  V_CONTACT LIKE 'Smith%';

--if case sensitive, convert string to same character 

SELECT V_NAME, V_CONTACT, V_AREACODE, V_PHONE
FROM   VENDOR
WHERE  UPPER(V_CONTACT) LIKE 'SMITH%';

--Starts with S, ends with H, 3 characters inbetween

SELECT * FROM   VENDOR
WHERE  V_CONTACT LIKE 'S___h';


SELECT V_NAME, V_CONTACT, V_AREACODE, V_PHONE
FROM  VENDOR
WHERE  V_CONTACT NOT LIKE 'Smith%';


SELECT V_CODE, V_NAME FROM  VENDOR
WHERE  V_CODE IN (SELECT V_CODE FROM PRODUCT);


SELECT V_CODE, V_NAME FROM  VENDOR
	WHERE  V_CODE NOT IN (SELECT  V_CODE FROM PRODUCT);   

SELECT V_CODE, V_NAME FROM  VENDOR
	WHERE  V_CODE NOT IN (SELECT V_CODE FROM PRODUCT WHERE V_CODE IS NOT NULL);


--Q: List all vendors but only if there are products to order (P_QOH <= P_MIN)
SELECT * FROM  PRODUCT
WHERE EXISTS  (SELECT * FROM PRODUCT 
			WHERE P_QOH <= 30);


SELECT * FROM PRODUCT 
WHERE P_QOH <= 30;


--following statement adds a new column P_Salecode and P_INVCODE
ALTER TABLE PRODUCT
ADD P_SALECODE CHAR(1), P_INVCODE CHAR(2);

ALTER TABLE INVOICE
DROP  INV_CK1;

SELECT * FROM INVOICE

UPDATE PRODUCT
SET   P_SALECODE = '2'
WHERE  P_CODE = '1546-QQ2';
UPDATE PRODUCT
SET    P_SALECODE = '1'
WHERE  P_CODE IN ('2232/QWE', '2232/QTY');

UPDATE PRODUCT
SET    P_SALECODE = '1'
WHERE  P_INDATE >= '16-JAN-2012'
AND P_INDATE <  '10-FEB-2012';
UPDATE PRODUCT
SET    P_PRICE = P_PRICE*1.10
WHERE  P_PRICE < 50.00;
UPDATE PRODUCT
SET    P_SALECODE = '2'
WHERE  P_INDATE < '25-DEC-2011'

CREATE TABLE PART(
PART_CODE  	CHAR(8) not null,
PART_DESCRIPT	CHAR(35),
PART_PRICE   	DECIMAL(8,2),
V_CODE  		INTEGER,);

INSERT INTO PART (PART_CODE, PART_DESCRIPT, PART_PRICE, V_CODE) SELECT P_CODE, P_DESCRIPT, P_PRICE, V_CODE FROM PRODUCT;


select * from part

-- adding primary key requires column to specify not null

ALTER TABLE PART
ADD PRIMARY KEY (PART_CODE),
FOREIGN KEY (V_CODE) REFERENCES VENDOR 
ON UPDATE CASCADE;


ALTER TABLE PART
drop PRIMARY KEY (PART_CODE);

drop table part;


SELECT COUNT(distinct v_code) FROM PRODUCT 
WHERE  P_PRICE <= 10.00

SELECT COUNT(*) FROM PRODUCT 
WHERE  P_PRICE <= 10.00

SELECT P_CODE, P_DESCRIPT, P_PRICE FROM   PRODUCT
WHERE  P_PRICE = (SELECT MAX(P_PRICE) FROM PRODUCT)


--does not count null values
select count (v_code) from product;
--does
select count (*) from product;

--legacy format, number in paren doesnt matter, still counts all
select count (1) from product;

--counts number of unique values, doesnt count null
select count (distinct v_code) from product;

SELECT MAX(P_PRICE) FROM PRODUCT;

SELECT P_CODE, P_DESCRIPT, P_PRICE FROM   PRODUCT
WHERE  P_PRICE = (SELECT MAX(P_PRICE) FROM PRODUCT);

select * from product;

UPDATE PRODUCT
SET   P_SALECODE = '2'
WHERE  P_CODE = '1546-QQ2';
UPDATE PRODUCT
SET    P_SALECODE = '1'
WHERE  P_CODE IN ('2232/QWE', '2232/QTY');
UPDATE PRODUCT
SET    P_SALECODE = '1'
WHERE  P_CODE ='2232/QWE' OR P_CODE = '2232/QTY';

UPDATE PRODUCT
SET    P_SALECODE = '1'
WHERE  P_INDATE >= '16-JAN-2012'
AND P_INDATE <  '10-FEB-2012';
UPDATE PRODUCT
SET    P_PRICE = P_PRICE*1.10
WHERE  P_PRICE < 50.00;
UPDATE PRODUCT
SET    P_SALECODE = '2'
WHERE  P_INDATE < '25-DEC-2011'


select * from product;

SELECT P_SALECODE, MIN(P_PRICE)
FROM   PRODUCT
where P_salecode is not null
GROUP  BY P_SALECODE;

SELECT P_SALECODE, AVG(P_PRICE)
FROM   PRODUCT
GROUP  BY P_SALECODE;


SELECT P_SALECODE, MIN(P_PRICE)
FROM   PRODUCT
GROUP  BY P_SALECODE
Having P_salecode is not null;

--^ using having takes more processing power, but is used to further refine results. If same result can be achieved with a where condition, it is more performance friendly.

select v_code, count(p_code) 
from product 
where v_code is not null
group by v_code;

select v_code, count(distinct p_code) from product
group by (v_code);

select * from product;

select v_code, count(distinct p_code), avg(p_price) 
from product
where p_price < (10)
group by (v_code);

select v_code, count(distinct p_code), avg(p_price) 
from product
group by (v_code)
having avg(p_price) < (10);


SELECT V_CODE, COUNT(DISTINCT P_CODE), AVG(P_PRICE)
FROM   PRODUCT
where p_price <10
GROUP  BY V_CODE
HAVING AVG(P_PRICE) < 10

SELECT P_DESCRIPT, P_PRICE, VENDOR.V_CODE, V_NAME, V_CONTACT, V_AREACODE, V_PHONE 
FROM   PRODUCT, VENDOR
WHERE  PRODUCT.V_CODE = VENDOR.V_CODE


SELECT P_DESCRIPT, P_PRICE, V_NAME, V_CONTACT, V_AREACODE, V_PHONE
FROM   PRODUCT, VENDOR
WHERE  PRODUCT.V_CODE = VENDOR.V_CODE
  AND  P_INDATE > '15-JAN-2012'


  SELECT CUS_LNAME, INVOICE.INV_NUMBER, INV_DATE, P_DESCRIPT
FROM   CUSTOMER, INVOICE, LINE, PRODUCT
WHERE  CUSTOMER.CUS_CODE = INVOICE.CUS_CODE
  AND  INVOICE.INV_NUMBER = LINE.INV_NUMBER
  AND  LINE.P_CODE = PRODUCT.P_CODE
  AND  CUSTOMER.CUS_CODE = 10014
ORDER  BY INVOICE.INV_NUMBER


SELECT P_DESCRIPT, P_PRICE, V_NAME, V_CONTACT, V_AREACODE, V_PHONE
FROM   PRODUCT, VENDOR
WHERE  Product.V_CODE = VENDOR.V_CODE
ORDER  BY P_PRICE


SELECT P_DESCRIPT, P_PRICE, V_NAME, V_CONTACT, V_AREACODE, V_PHONE
FROM   PRODUCT P, VENDOR V
WHERE  P.V_CODE = V.V_CODE
ORDER  BY P_PRICE


SELECT E.EMP_MGR, M.EMP_LNAME,E.EMP_NUM, E.EMP_LNAME
FROM   EMP E, EMP M
WHERE  E.EMP_MGR=M.EMP_NUM
ORDER  BY E.EMP_MGR



